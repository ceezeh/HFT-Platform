if(ENABLE_TESTING)
    set(UNIT_TEST_NAME disruptor_tests)    

    set(TEST_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/disruptor_tests.cpp")
    set(TEST_HEADERS "")

    add_executable(${UNIT_TEST_NAME} ${TEST_SOURCES} ${TEST_HEADERS})

    find_package(Catch2 3 REQUIRED)
    target_link_libraries(${UNIT_TEST_NAME} PUBLIC ${LIBRARY_NAME})
    target_link_libraries(${UNIT_TEST_NAME} PRIVATE Catch2::Catch2)

    foreach(loopVar RANGE 0 100 1)
        add_test(NAME ${UNIT_TEST_NAME}-flaky-${loopVar} COMMAND ${UNIT_TEST_NAME})
    endforeach()

    target_set_warnings(
        TARGET
        ${UNIT_TEST_NAME}
        ENABLE
        ${ENABLE_WARNINGS}
        AS_ERRORS
        ${ENABLE_WARNINGS_AS_ERRORS})

    if(ENABLE_COVERAGE)
        set(COVERAGE_MAIN "coverage")
        set(COVERAGE_EXCLUDES
            "${PROJECT_SOURCE_DIR}/app/*"
            "${PROJECT_SOURCE_DIR}/cmake/*"
            "${PROJECT_SOURCE_DIR}/docs/*"
            "${PROJECT_SOURCE_DIR}/external/*"
            "${PROJECT_SOURCE_DIR}/tests/*"
            "${PROJECT_SOURCE_DIR}/build/*"
            "/usr/include/*")
        setup_target_for_coverage_lcov(
            NAME
            ${COVERAGE_MAIN}
            EXECUTABLE
            ${UNIT_TEST_NAME}
            DEPENDENCIES
            ${UNIT_TEST_NAME})
    endif()

    set(BENCHMARK_TEST_NAME disruptor_benchmark_tests)
    set(TEST_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/${BENCHMARK_TEST_NAME}.cpp")
    add_executable(${BENCHMARK_TEST_NAME} ${TEST_SOURCES} ${TEST_HEADERS})
    target_link_libraries(${BENCHMARK_TEST_NAME} PUBLIC ${LIBRARY_NAME})

    find_package(benchmark REQUIRED)
    target_link_libraries(${BENCHMARK_TEST_NAME} PRIVATE benchmark::benchmark)
    add_test(NAME ${BENCHMARK_TEST_NAME} COMMAND ${BENCHMARK_TEST_NAME})
endif()
